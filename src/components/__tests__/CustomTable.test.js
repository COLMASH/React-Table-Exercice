import React from 'react'
import '@testing-library/jest-dom';
import '@testing-library/jest-dom/extend-expect'
import {render, screen, fireEvent, waitFor, cleanup, act} from '@testing-library/react'
import 'regenerator-runtime/runtime'

import {CustomTable} from '../CustomTable'

// <CustomTable/> Unit Testing
describe('<CustomTable/>', () => {
    beforeEach(() => {
        act(() => {
            render(<CustomTable/>)
        })
    })

    afterEach(() => {
    })
    test("-1- check if 'CustomTable' is rendered", async () => {
        const comercioHeader = screen.getByText(/Comercio/i)
        expect(comercioHeader).toBeInTheDocument()
        //     screen.debug(undefined, 100000)
    })
    test("-2- check if 'Comercio' sorting symbol change properly", async () => {
        const comercioHeader = screen.getByText(/Comercio/i)
        const comercioHeaderPauseSymbol = screen.getAllByText(/⏸/i)
        expect(comercioHeaderPauseSymbol.length).toEqual(3)
        fireEvent.click(comercioHeader)
        const comercioHeaderUpwardSymbol = screen.getByText(/🔼/i)
        const comercioHeaderPauseSymbol2 = screen.getAllByText(/⏸/i)
        expect(comercioHeaderPauseSymbol2.length).toEqual(2)
        expect(comercioHeaderUpwardSymbol).toBeInTheDocument()
        fireEvent.click(comercioHeader)
        const comercioHeaderDownwardSymbol = screen.getByText(/🔽/i)
        expect(comercioHeaderDownwardSymbol).toBeInTheDocument()
        fireEvent.click(comercioHeader)
        expect(comercioHeaderPauseSymbol.length).toEqual(3)
        // screen.debug(undefined, 100000)
    })
    test("-3- check if 'CUIT' sorting symbol change properly", async () => {
        const cuitHeader = screen.getByText(/CUIT/i)
        const cuitHeaderPauseSymbol = screen.getAllByText(/⏸/i)
        expect(cuitHeaderPauseSymbol.length).toEqual(3)
        fireEvent.click(cuitHeader)
        const cuitHeaderUpwardSymbol = screen.getByText(/🔼/i)
        const cuitHeaderPauseSymbol2 = screen.getAllByText(/⏸/i)
        expect(cuitHeaderPauseSymbol2.length).toEqual(2)
        expect(cuitHeaderUpwardSymbol).toBeInTheDocument()
        fireEvent.click(cuitHeader)
        const cuitHeaderDownwardSymbol = screen.getByText(/🔽/i)
        expect(cuitHeaderDownwardSymbol).toBeInTheDocument()
        fireEvent.click(cuitHeader)
        expect(cuitHeaderPauseSymbol.length).toEqual(3)
        // screen.debug(undefined, 100000)
    })
    test("-4- check if 'Activo' sorting symbol change properly", async () => {
        const activoHeader = screen.getByText(/Activo/i)
        const activoHeaderPauseSymbol = screen.getAllByText(/⏸/i)
        expect(activoHeaderPauseSymbol.length).toEqual(3)
        fireEvent.click(activoHeader)
        const activoHeaderUpwardSymbol = screen.getByText(/🔼/i)
        const activoHeaderPauseSymbol2 = screen.getAllByText(/⏸/i)
        expect(activoHeaderPauseSymbol2.length).toEqual(2)
        expect(activoHeaderUpwardSymbol).toBeInTheDocument()
        fireEvent.click(activoHeader)
        const activoHeaderDownwardSymbol = screen.getByText(/🔽/i)
        expect(activoHeaderDownwardSymbol).toBeInTheDocument()
        fireEvent.click(activoHeader)
        expect(activoHeaderPauseSymbol.length).toEqual(3)
        // screen.debug(undefined, 100000)
    })
    test("-5- check if 'Siguiente' button change page properly", async () => {
        const siguienteButton = screen.getByRole('button', {name: /Siguiente/i})
        const pagina1Text = screen.getByText(/1 de/i)
        expect(pagina1Text).toBeInTheDocument()
        fireEvent.click(siguienteButton)
        const pagina2Text = screen.getByText(/2 de/i)
        expect(pagina2Text).toBeInTheDocument()
        fireEvent.click(siguienteButton)
        const pagina3Text = screen.getByText(/3 de/i)
        expect(pagina3Text).toBeInTheDocument()
        // screen.debug(undefined, 100000)
    })
    test("-6- check if 'Anterior' button change page properly", async () => {
        const siguienteButton = screen.getByRole('button', {name: /Siguiente/i})
        const anteriorButton = screen.getByRole('button', {name: /Anterior/i})
        expect(anteriorButton).toBeDisabled()
        fireEvent.click(siguienteButton)
        expect(anteriorButton).not.toBeDisabled()
        const pagina2Text = screen.getByText(/2 de/i)
        expect(pagina2Text).toBeInTheDocument()
        fireEvent.click(anteriorButton)
        const pagina1Text = screen.getByText(/1 de/i)
        expect(pagina1Text).toBeInTheDocument()
        // screen.debug(undefined, 100000)
    })
    test("-7- check if 'Ir a la página' input change page properly", async () => {
        const changePageInput = screen.getByTestId(/Go to page input/i)
        fireEvent.change(changePageInput, {target: {value: 10}})
        const pagina10Text = screen.getByText(/10 de/i)
        expect(pagina10Text).toBeInTheDocument()
        // screen.debug(undefined, 100000)
    })
    test("-8- check if '>>' button change page properly (last page)", async () => {
        const gotoFinalPageButton = screen.getByTestId(/Final page/i)
        fireEvent.click(gotoFinalPageButton)
        const pagina50Text = screen.getByText(/50 de/i)
        expect(pagina50Text).toBeInTheDocument()
        expect(gotoFinalPageButton).toBeDisabled()
        // screen.debug(undefined, 100000)
    })
    test("-9- check if '<<' button change page properly (first page)", async () => {
        const gotoFirstPageButton = screen.getByTestId(/First page/i)
        const gotoFinalPageButton = screen.getByTestId(/Final page/i)
        expect(gotoFirstPageButton).toBeDisabled()
        fireEvent.click(gotoFinalPageButton)
        expect(gotoFirstPageButton).not.toBeDisabled()
        fireEvent.click(gotoFirstPageButton)
        const pagina1Text = screen.getByText(/1 de/i)
        expect(pagina1Text).toBeInTheDocument()
        // screen.debug(undefined, 100000)
    })
    test("-10- check if 'Mostrar' select rows per page properly", async () => {
        const mostrarSelect = screen.getByTestId(/Select items per page/i)
        fireEvent.change(mostrarSelect, { target: { value: '50' } });
        const pagina1de10Text = screen.getByText(/1 de 10/i)
        expect(pagina1de10Text).toBeInTheDocument()
        // screen.debug(undefined, 100000)
    })
})
